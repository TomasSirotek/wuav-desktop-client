<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.wuav.client.dal.mappers.UserMapper">

    <resultMap id="userResult" type="AppUser">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="email" column="email"/>
        <result property="passwordHash" column="passWordHash"/>
        <result property="createdAt" javaType="Date" column="createdAt"/>
        <collection property="roles" javaType="ArrayList" column="id" ofType="AppRole">
            <id property="id" column="idRole"/>
            <result property="name" column="nameRole"/>
        </collection>
        <collection property="projects" javaType="ArrayList" column="id" ofType="Project">
            <id property="id" column="idProject"/>
            <result property="name" column="projectName"/>
            <result property="description" column="description"/>
            <result property="createdAt" javaType="Date" column="createdAtProject"/>
        </collection>
    </resultMap>

    <select id="getUserByEmail"
            resultMap="userResult">

        SELECT DISTINCT u.id,
                        u.name,
                        u.email,
                        u.password_hash as passwordHash,
                        u.created_at    as createdAt,
                        r.id            as idRole,
                        r.name          as nameRole,
                        p.id            as idProject,
                        p.name          as projectName,
                        p.description,
                        p.created_at as createdAtProject
        FROM app_user u
                 INNER JOIN user_role ur ON u.id = ur.user_id
                 INNER JOIN app_role r ON ur.role_id = r.id
                 LEFT JOIN user_project up ON u.id = up.user_id
                 LEFT JOIN project p ON up.project_id = p.id
        WHERE u.email = #{email}


    </select>



    <select id="getUserById"
            resultMap="userResult">
        SELECT DISTINCT u.id,
                        u.name,
                        u.email,
                        u.password_hash as passwordHash,
                        u.created_at    as createdAt,
                        r.id            as idRole,
                        r.name          as nameRole
        FROM app_user u
                 INNER JOIN user_role ur ON u.id = ur.user_id
                 INNER JOIN app_role r ON ur.role_id = r.id

        WHERE u.id = #{userId}
    </select>


    <!--    this bullshit does not map column names with kebab case psw_has -->
    <!--    so it needs to be casted -->
    <select id="getAllUsers"
            resultMap="userResult">
        SELECT u.id,
               u.name,
               u.email,
               u.psw_hash as passWordHash,
               u.isActivated,
               r.id       as idRole,-->
               r.name     as nameRole-->
        FROM app_user AS u -->
                 left outer join user_role ur on u.id = ur.user_id
                 left outer join role r on ur.role_id = r.id
    </select>


    <insert
            id="createCustomer"
            statementType="PREPARED"
            keyProperty="id"
            keyColumn="id"
            parameterType="AppUser"
            useGeneratedKeys="false"
    >
        INSERT INTO app_user (id, name, email, psw_hash, isActivated)
        VALUES (#{id}, #{name}, #{email}, #{passwordHash}, #{isActivated});
    </insert>

    <insert
            id="addUserToRole"
            statementType="PREPARED"
            keyProperty="id"
            keyColumn="id"
            useGeneratedKeys="false"
            parameterType="map"
    >
        --  insert categoryId and movieId to joining table
        INSERT INTO user_role (user_id, role_id)
        VALUES (#{userId}, #{roleId})

    </insert>


</mapper>
